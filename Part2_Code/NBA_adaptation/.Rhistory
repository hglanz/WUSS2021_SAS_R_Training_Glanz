num_groups <- floor(nstudents / group_size)
num_leftover <- nstudents %% group_size
all_groups <- as.data.frame(matrix(0, nrow = nstudents, ncol = unique_groups))
names(all_groups) <- paste0("Group", 1:unique_groups)
all_groups[,1] <- c(rep(1:num_groups, times = group_size), rep(0, num_leftover))
for (i in 2:unique_groups) {
for (j in 2:group_size) {
all_groups[(num_groups*(j-1) + 1):(num_groups*(j-1) + num_groups),i] <- rotvec_n(1:num_groups, j-1)
}
}
return(all_groups)
}
m <- create_groups()
m
create_groups <- function(nstudents = 36, group_size = 3, unique_groups = 3) {
num_groups <- floor(nstudents / group_size)
num_leftover <- nstudents %% group_size
all_groups <- as.data.frame(matrix(0, nrow = nstudents, ncol = unique_groups))
names(all_groups) <- paste0("Group", 1:unique_groups)
all_groups[,1] <- c(rep(1:num_groups, times = group_size), rep(0, num_leftover))
for (k in 2:unique_groups) {
all_groups[1:num_groups, k] <- 1:num_groups
}
for (i in 2:unique_groups) {
for (j in 2:group_size) {
all_groups[(num_groups*(j-1) + 1):(num_groups*(j-1) + num_groups),i] <- rotvec_n(1:num_groups, (j-1)*unique_groups)
}
}
return(all_groups)
}
m <- create_groups()
m
?ifelse
create_groups <- function(nstudents = 36, group_size = 3, unique_groups = 3) {
num_groups <- floor(nstudents / group_size)
num_leftover <- nstudents %% group_size
all_groups <- as.data.frame(matrix(0, nrow = nstudents, ncol = unique_groups))
names(all_groups) <- paste0("Group", 1:unique_groups)
all_groups[,1] <- c(rep(1:num_groups, times = group_size), rep(0, num_leftover))
for (k in 2:unique_groups) {
all_groups[1:num_groups, k] <- 1:num_groups
}
for (i in 2:unique_groups) {
for (j in 2:group_size) {
all_groups[(num_groups*(j-1) + 1):(num_groups*(j-1) + num_groups),i] <- rotvec_n(1:num_groups, ifelse(i==2, (j-1), (j-1)*(i-2)*unique_groups))
}
}
return(all_groups)
}
m <- create_groups()
m
library(purrr)
mtcars %>%
select(-cyl) %>%
map(sqrt)
library(tidyverse)
mtcars %>%
select(-cyl) %>%
map(sqrt)
table(mtcars$cyl)
library(tidyverse)
mtcars %>%
group_by(cyl) %>%
summarize(avg_mpg = mean(mpg))
new_mtcars <- mtcars %>%
group_by(cyl) %>%
summarize(avg_mpg = mean(mpg)) %>%
right_join(mtcars, by = "cyl") %>%
arrange(avg_mpg, mpg)
new_mtcars
View(new_mtcars)
new_mtcars <- mtcars %>%
group_by(cyl) %>%
summarize(avg_mpg = mean(mpg)) %>%
left_join(mtcars, by = "cyl") %>%
arrange(avg_mpg, mpg)
View(new_mtcars)
new_mtcars <- mtcars %>%
group_by(cyl) %>%
summarize(avg_mpg = mean(mpg)) %>%
full_join(mtcars, by = "cyl") %>%
arrange(avg_mpg, mpg)
View(new_mtcars)
nrow(mtcars)
library(stringr)
phrases <- c("College of Science and Mathematics",
"Orfalea College of Business",
"College of Agriculture, Food \& Environmental Sciences",
"College of Architecture \& Environmental Design",
"College of Engineering",
"College of Liberal Arts")
str_which("Science", phrases)
phrases <- c("College of Science and Mathematics",
"Orfalea College of Business",
"College of Agriculture, Food & Environmental Sciences",
"College of Architecture & Environmental Design",
"College of Engineering",
"College of Liberal Arts")
str_which("Science", phrases)
str_detect("Science", phrases)
str_which(phrases, "Science")
str_detect(phrases, "Science")
str_locate(phrases, "Science")
library(tidyverse)
iris %>%
filter(str_detect(Species, "Vers"))
library(tidyverse)
data <- data.frame(
name = c("Hunter Glanz", "Kelly Bodwin", "Greg Wilson", "Danny Zucco"),
phone = c("805-756-2792", "805 756 2450", "202.867.5309", "619-805-2345")
)
data %>%
filter(str_detect(phone, "805"))
data %>%
filter(str_detect(phone, "^805"))
data %>%
mutate(
new_phone = str_replace(phone, "-", "")
)
data %>%
mutate(
new_phone = str_replace_all(phone, "-", "")
)
data %>%
mutate(
new_phone = str_replace_all(phone, "-| ", "")
)
data %>%
mutate(
new_phone = str_replace_all(phone, "-| |\\.", "")
)
data %>%
separate(phone, c("areacode", "newphone"), sep = "-")
data %>%
mutate(
phone = str_replace(phone, "-| |\\.", "a")
) %>%
separate(phone, c("areacode", "newphone"), sep = "-| |\\.")
data %>%
mutate(
phone = str_replace(phone, "-| |\\.", "a")
) %>%
separate(phone, c("areacode", "newphone"), sep = "a") %>%
mutate(
newphone = str_replace(newphone, "-| |\\.", "")
)
data %>%
mutate(
phone = str_replace_all(phone, "-| |\\.", ""),
areacode = str_subset(phone, 1, 3)
) %>%
data %>%
filter(str_detect(phone, "805"))
data %>%
mutate(
phone = str_replace_all(phone, "-| |\\.", ""),
areacode = str_subset(phone, 1, 3)
)
data %>%
mutate(
phone = str_replace_all(phone, "-| |\\.", ""),
areacode = str_sub(phone, 1, 3)
)
data
data %>%
mutate(
new_phone = str_replace(phone, "-", NULL)
)
install.packages("palmerpenguins")
library(palmerpenguins)
library(tidyverse)
penguins %>%
dplyr::mutate(
Thing = case_when(
species == "Gentoo" ~ "G",
TRUE ~ NA
)
)
x <- c("G", "G", "N", NA)
x
penguins
table(penguins$species)
penguins$species[penguins$species == "Gentoo"] <- NA
table(penguins$species)
summary(penguins$species)
library(tidyverse)
mtcars %>%
group_by(cyl) %>%
arrange(hp)
d <- mtcars %>%
group_by(cyl) %>%
arrange(hp)
View(d)
library(palmerpenguins)
library(tidyverse)
penguins
penguins %>%
ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
geom_point()
library(palmerpenguins)
library(tidyverse)
state.abb
state.name
x <- c(" California", " Arizona ")
trimws(x)
?trimws
library(stringr)
?str_trim
?rep
rep(1:3, times = 1:3)
7*7*24*60*15
library(tidyverse)
library(tidyverse)
raid_gamble <- function(n, max_num) {
vals <- runif(n, 0, max_num)
payout <- max(vals) - min(vals)
return(payout)
}
sim_gamble <- function(ntimes, n, max_num, plot = TRUE) {
payouts <- replicate(ntimes, raid_gamble(n, max_num))
data <- data.frame(payouts)
data %>%
ggplot(aes(x = payouts)) +
geom_histogram()
}
sim_gamble(1e5, 5, 50000)
n <- 5:10
max_num <- 50000
ntimes <- 1e5
sim_gamble(1e5, 5, 50000)
payouts <- replicate(ntimes, raid_gamble(n, max_num))
n
ntimes[1]
paste(n, "people")
library(tidyverse)
raid_gamble <- function(n, max_num) {
vals <- runif(n, 0, max_num)
payout <- max(vals) - min(vals)
return(payout)
}
sim_gamble <- function(ntimes, n, max_num, plot = TRUE) {
payouts <- matrix(0, nrow = ntimes, ncol = length(n))
for (i in 1:length(n)) {
payouts[,i] <- replicate(ntimes, raid_gamble(n[i], max_num))
}
data <- data.frame(payouts)
names(data) <- paste0(n, "people")
data <- data %>%
pivot_longer(names_to = "playing", values_to = "payout")
if (plot) {
data %>%
ggplot(aes(x = payout)) +
geom_histogram() +
facet_wrap(~playing)
}
}
sim_gamble(1e5, n, 50000)
?pivot_long
?pivot_longer
library(tidyverse)
raid_gamble <- function(n, max_num) {
vals <- runif(n, 0, max_num)
payout <- max(vals) - min(vals)
return(payout)
}
sim_gamble <- function(ntimes, n, max_num, plot = TRUE) {
payouts <- matrix(0, nrow = ntimes, ncol = length(n))
for (i in 1:length(n)) {
payouts[,i] <- replicate(ntimes, raid_gamble(n[i], max_num))
}
data <- data.frame(payouts)
names(data) <- paste0(n, "people")
data <- data %>%
pivot_longer(everything(), names_to = "playing", values_to = "payout")
if (plot) {
data %>%
ggplot(aes(x = payout)) +
geom_histogram() +
facet_wrap(~playing)
}
}
sim_gamble(1e5, n, 50000)
library(tidyverse)
raid_gamble <- function(n, max_num) {
vals <- runif(n, 0, max_num)
payout <- max(vals) - min(vals)
return(payout)
}
sim_gamble <- function(ntimes, n, max_num, plot = TRUE) {
payouts <- matrix(0, nrow = ntimes, ncol = length(n))
for (i in 1:length(n)) {
payouts[,i] <- replicate(ntimes, raid_gamble(n[i], max_num))
}
data <- data.frame(payouts)
names(data) <- paste0("people", n)
data <- data %>%
pivot_longer(everything(), names_to = "playing", values_to = "payout")
if (plot) {
data %>%
ggplot(aes(x = payout)) +
geom_histogram() +
facet_wrap(~playing)
}
}
sim_gamble(1e5, n, 50000)
?join_all
library(tidyverse)
?join_all
library(ISLR)
install.packages("ISLR")
set.seed(100)
train = college[sample(1:777, 500, replace=F),]
library(ISLR)
set.seed(100)
train = college[sample(1:777, 500, replace=F),]
college <- College
set.seed(100)
train = college[sample(1:777, 500, replace=F),]
test = college[-sample(1:777, 500, replace=F),]
#gam fit
gam1 = lm(Outstate ~ bs(Room.Board, df=4)+bs(Books, knots=c(475, 600))+bs(Terminal, df=6)+bs(perc.alumni, knots=c(10,30))+bs(log(train$Expend), knots=c(8.5,10))+bs(train$Grad.Rate, df=6), data=train); summary(gam1)
library(splines)
#gam fit
gam1 = lm(Outstate ~ bs(Room.Board, df=4)+bs(Books, knots=c(475, 600))+bs(Terminal, df=6)+bs(perc.alumni, knots=c(10,30))+bs(log(train$Expend), knots=c(8.5,10))+bs(train$Grad.Rate, df=6), data=train); summary(gam1)
#predict
test_frame =cbind(test[,c("Room.Board","Books","Terminal","perc.alumni","Expend","Grad.Rate")])
gam_predict = predict(gam1, test_frame)
gam_predict = predict(gam1, test)
mysample <- sample(1:777, 500, replace=F)
train = college[mysample,]
test = college[-mysample,]
#gam fit
gam1 = lm(Outstate ~ bs(Room.Board, df=4)+bs(Books, knots=c(475, 600))+bs(Terminal, df=6)+bs(perc.alumni, knots=c(10,30))+bs(log(train$Expend), knots=c(8.5,10))+bs(train$Grad.Rate, df=6), data=train)
summary(gam1)
#predict
test_frame =cbind(test[,c("Room.Board","Books","Terminal","perc.alumni","Expend","Grad.Rate")])
gam_predict = predict(gam1, test)
gam_predict = predict(gam1, newdata = test)
#gam fit
gam1 = lm(Outstate ~ bs(Room.Board, df=4)+bs(Books, knots=c(475, 600))+bs(Terminal, df=6)+bs(perc.alumni, knots=c(10,30))+bs(log(Expend), knots=c(8.5,10))+bs(Grad.Rate, df=6), data=train)
gam_predict = predict(gam1, newdata = test)
library(tidyverse)
?summarise)
?summarise
?country_code
install.packages("countrycode")
library(countrycode)
?country_code
?countrycode
?codelist
2.5989/(4.7854/12)
2.5989/(4.7854)
2.5989/5.3646
install.packages(c(
"gapminder", "ggforce", "globals", "openintro", "shiny",
"shinycssloaders", "shinyFeedback", "shinythemes", "testthat",
"thematic", "tidyverse", "vroom", "waiter", "xml2", "zeallot"
))
98/110
96/110
88/110
90/110
92/110
80/110
81/110
library(gbm)
1500+3000+6000+6000+3000+3000+6500
104.5/125
115/125
install.packages("blogdown")
x <- rpois(10, 5)
y <- rpoise(10, 3)
set.seed(1)
x <- rpois(10, 5)
y <- rpoise(10, 3)
y <- rpois(10, 3)
erin_cor <- function(x, y) {
corval <- (sum((x - mean(x, na.rm = T))*
(y - mean(y, na.rm = T))))/
((sqrt(sum((x - mean(x, na.rm = T))^2)))*
(sqrt(sum((y - mean(y, na.rm = T))^2))))
return(corval)
}
cor(x, y)
erin_cor(x, y)
x[5] <- NA
cor(x, y)
erin_cor(x, y)
set.seed(1)
x <- rpois(10, 5)
y <- rpois(10, 3)
# lag_df <- juvenile %>%
# mutate(central_ca = dplyr::lag(central_ca, n = i)) %>% drop_na()
erin_cor <- function(x, y) {
na_inds <- c(which(is.na(x)), which(is.na(y)))
x <- x[-na_inds]
y <- y[-na_inds]
corval <- (sum((x - mean(x, na.rm = T))*
(y - mean(y, na.rm = T))))/
((sqrt(sum((x - mean(x, na.rm = T))^2)))*
(sqrt(sum((y - mean(y, na.rm = T))^2))))
return(corval)
}
cor(x, y)
erin_cor(x, y)
x[5] <- NA
cor(x, y, na.rm = T)
erin_cor(x, y)
set.seed(1)
x <- rpois(10, 5)
y <- rpois(10, 3)
# lag_df <- juvenile %>%
# mutate(central_ca = dplyr::lag(central_ca, n = i)) %>% drop_na()
erin_cor <- function(x, y) {
na_inds <- c(which(is.na(x)), which(is.na(y)))
if (length(na_inds) > 0) {
x <- x[-na_inds]
y <- y[-na_inds]
}
corval <- (sum((x - mean(x, na.rm = T))*
(y - mean(y, na.rm = T))))/
((sqrt(sum((x - mean(x, na.rm = T))^2)))*
(sqrt(sum((y - mean(y, na.rm = T))^2))))
return(corval)
}
cor(x, y)
erin_cor(x, y)
x[5] <- NA
cor(x, y, na.rm = T)
erin_cor(x, y)
set.seed(1)
x <- rpois(10, 5)
y <- rpois(10, 3)
# lag_df <- juvenile %>%
# mutate(central_ca = dplyr::lag(central_ca, n = i)) %>% drop_na()
erin_cor <- function(x, y) {
na_inds <- c(which(is.na(x)), which(is.na(y)))
if (length(na_inds) > 0) {
x <- x[-na_inds]
y <- y[-na_inds]
}
corval <- (sum((x - mean(x, na.rm = T))*
(y - mean(y, na.rm = T))))/
((sqrt(sum((x - mean(x, na.rm = T))^2)))*
(sqrt(sum((y - mean(y, na.rm = T))^2))))
return(corval)
}
cor(x, y)
erin_cor(x, y)
ccf(x, y)
x[5] <- NA
cor(x, y, na.rm = T)
erin_cor(x, y)
ccf(x, y)
z <- ccf(x, y)
z
-6 %% 3
install.packages("prettydoc")
shiny::runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
x <- kmeans(mtcars, 3)
x$centers
x$centers[,1]
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
?geom_point
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
x$centers
y = x$centers
y = as.data.frame(x$centers)
y
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
x$cluster
as.character(x$cluster)
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp()
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
runApp('F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/mtcars_clustering_v2')
install.packages("ggvis")
library(haven)
setwd("F:/Dropbox/Hunter/FlashDrive-64GB/CalPoly-prof/Conferences_Talks/WUSS/2021/SAS-Plus-R-Class_2021/GitHub_Repo/WUSS2021_SAS_R_Training_Glanz/Part2_Code/NBA_adaptation/")
nba <- read_sas("clean_nba3.sas7bdat")
View(nba)
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
library(dbplyr)
library(dbplyr)
runApp()
library(RSQLite)
install.packages("RSQLite")
runApp()
install.packages("DescTools")
runApp()
